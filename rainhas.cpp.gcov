        -:    0:Source:rainhas.cpp
        -:    1:#include <iostream>
        -:    2:#include <fstream>
        -:    3:#include <string>
        -:    4:#include <vector>
        -:    5:#include <cstdio>
        -:    6:#include <algorithm>
        -:    7:#include "rainhas.hpp"
        -:    8:
        -:    9:using std::cout; using std::cin;
        -:   10:using std::endl; using std::string;
        -:   11:using std::vector;
        -:   12:
       60:   13:int verificaTamanho(const std::string& filename) {
       60:   14:    std::ifstream arquivo(filename);
        -:   15:
       60:   16:    if (!arquivo) {
    #####:   17:        std::cout << "Erro ao abrir o arquivo." << filename << std::endl;
    #####:   18:        return -2;
        -:   19:    }
        -:   20:
       60:   21:    int contLetras = 0;
       60:   22:    int contNumeros = 0;
        -:   23:    char caractere;
        -:   24:
     4414:   25:    while (arquivo.get(caractere)) {
     4354:   26:        if (isalpha(caractere)) {
       48:   27:            contLetras++;
     4306:   28:        } else if (isdigit(caractere)) {
     3790:   29:            contNumeros++;
        -:   30:        }
        -:   31:    }
        -:   32:
       60:   33:    if (contNumeros != 64 && contLetras != 0) {
        4:   34:        return -1;
        -:   35:    }
        -:   36:
       56:   37:    arquivo.close();
        -:   38:
       56:   39:    return 1;
       60:   40:}
        -:   41:
       32:   42:int check(const std::string& filename) {
       32:   43:    if (verificaTamanho(filename) == -1) { return -1;}
      28*:   44:    if (verificaTamanho(filename) == -2) { return -2;}
        -:   45:
       28:   46:    std::ifstream arquivo(filename);
        -:   47:
       28:   48:    std::string linha1, linha2, linha3, linha4, linha5, linha6, linha7, linha8;
       28:   49:    std::string linhaExtra;
        -:   50:
       28:   51:    if (std::getline(arquivo, linha1) &&
       56:   52:        std::getline(arquivo, linha2) &&
       28:   53:        std::getline(arquivo, linha3) &&
       28:   54:        std::getline(arquivo, linha4) &&
       28:   55:        std::getline(arquivo, linha5) &&
       28:   56:        std::getline(arquivo, linha6) &&
       28:   57:        std::getline(arquivo, linha7) &&
       83:   58:        std::getline(arquivo, linha8) &&
       27:   59:        !std::getline(arquivo, linhaExtra)) {
        -:   60:    } else {
        2:   61:        return -1;
        -:   62:    }
        -:   63:
       26:   64:    arquivo.close();
        -:   65:
       26:   66:    int valueReturn = 1;
        -:   67:    int arrayLine1[8];  
        -:   68:    int arrayLine2[8];
        -:   69:    int arrayLine3[8];
        -:   70:    int arrayLine4[8];
        -:   71:    int arrayLine5[8];
        -:   72:    int arrayLine6[8];
        -:   73:    int arrayLine7[8];
        -:   74:    int arrayLine8[8];
        -:   75:
       26:   76:    int countLine = 0;
       26:   77:    int countTotal = 0;
        -:   78:    int* arrays[] = {
        -:   79:       arrayLine1, arrayLine2, arrayLine3, arrayLine4,
       26:   80:       arrayLine5, arrayLine6, arrayLine7, arrayLine8};
        -:   81:
        -:   82:    vector<string> linhas =
      260:   83:      { linha1, linha2, linha3, linha4, linha5, linha6, linha7, linha8};
        -:   84:
       26:   85:    int attackSameLine[8] = {10, 10, 10, 10, 10, 10, 10, 10};
        -:   86:
       26:   87:    std::string ataques = "";  
        -:   88:
      229:   89:    for (int i = 0; i < 8; i++) {
      205:   90:        countLine = 0;
     1845:   91:        for (int y = 0; y < 8; y++) {attackSameLine[y] = 10;}
        -:   92:
     1841:   93:        for (int j = 0; j < 8; j++) {
     1638:   94:            if (linhas[i][j] - '0' == 1 || linhas[i][j] - '0' == 0) {
     1636:   95:                arrays[i][j] = linhas[i][j] - '0';
     1636:   96:                if (arrays[i][j] == 1) {
      188:   97:                    countLine += 1;
      188:   98:                    countTotal += 1;
        -:   99:                }
        2:  100:            } else { return -1;}  
        -:  101:        }
        -:  102:
      203:  103:        if (countLine >=  2) {
       63:  104:            for (int x = 0; x < 8; x++) {
       56:  105:                if (arrays[i][x] == 1) {
       54:  106:                    for (int a = 0; a < 8; a++) {
       54:  107:                        if (attackSameLine[a] == 10) {
       20:  108:                            attackSameLine[a] = x;
       20:  109:                            break;
        -:  110:                        }
        -:  111:                    }
        -:  112:                }
        -:  113:            }
       56:  114:            for (int b = 0; b < 7; b++) {
       49:  115:                if (attackSameLine[b] != 10 && attackSameLine[b+1] != 10) {
       13:  116:                    ataques += std::to_string(i + 1); ataques += ",";
       13:  117:                    ataques += std::to_string(attackSameLine[b] + 1);
       13:  118:                    ataques += "            ";
       13:  119:                    ataques += std::to_string(i + 1); ataques += ",";
       13:  120:                    ataques += std::to_string(attackSameLine[b+1] + 1);
       13:  121:                    ataques += "\n";
       13:  122:                    valueReturn = 0;
        -:  123:                }
        -:  124:            }
        -:  125:        }
        -:  126:    }
        -:  127:
       24:  128:    if (countTotal > 8 || countTotal < 8) {  
        2:  129:        return -1;
        -:  130:    }
        -:  131:
       22:  132:    bool shouldBreak = false;
      198:  133:    for (int i = 0; i < 8; i++) {
     1584:  134:        for (int j = 0; j < 8; j++) {
     1408:  135:            if (arrays[i][j] == 1) {
      176:  136:                shouldBreak =  false;
      967:  137:                for (int y = i; y < 8; y++) {
     4510:  138:                    for (int x = j; x < 8; x++) {
     3719:  139:                        if (arrays[y][x] == 1 && i != y && x == j) {
       16:  140:                            ataques += std::to_string(i + 1); ataques += ",";
       16:  141:                            ataques += std::to_string(j + 1);
       16:  142:                            ataques += "            ";
       16:  143:                            ataques += std::to_string(y + 1); ataques += ",";
       16:  144:                            ataques += std::to_string(x + 1); ataques += "\n";
        -:  145:
       16:  146:                            valueReturn = 0;
       16:  147:                            shouldBreak = true;
       16:  148:                            break;
        -:  149:                        }
        -:  150:                    }
      807:  151:                    if (shouldBreak) {break;}
        -:  152:                }
        -:  153:            }
        -:  154:        }
        -:  155:    }
        -:  156:
       22:  157:    int cont = 0;
      198:  158:    for (int i = 0; i < 8; i++) {
     1584:  159:        for (int j = 0; j < 8; j++) {
     1408:  160:            if (arrays[i][j] == 1) {
      176:  161:                cont = 1;
      489:  162:                for (int y = i + 1; y < 8; y++) {
      416:  163:                    if (j+cont >= 8) {
       63:  164:                        break;
        -:  165:                    }
      353:  166:                    if (arrays[y][j+cont] == 1) {
       40:  167:                        ataques += std::to_string(i + 1); ataques += ",";
       40:  168:                        ataques += std::to_string(j + 1);
       40:  169:                        ataques += "            ";
       40:  170:                        ataques += std::to_string(y + 1); ataques += ",";
       40:  171:                        ataques += std::to_string(j+cont + 1); ataques += "\n";
       40:  172:                        valueReturn = 0;
       40:  173:                        break;
        -:  174:                    }
      313:  175:                    cont += 1;
        -:  176:                }
        -:  177:            }
        -:  178:        }
        -:  179:    }
        -:  180:
       22:  181:    cont = 0;
      198:  182:    for (int i = 0; i < 8; i++) {
     1584:  183:        for (int j = 0; j < 8; j++) {
     1408:  184:            if (arrays[i][j] == 1) {
      176:  185:                cont = 1;
      505:  186:                for (int y = i + 1; y < 8; y++) {
      425:  187:                    if (j-cont < 0) {
       74:  188:                        break;
        -:  189:                    }
      351:  190:                    if (arrays[y][j-cont] == 1) {
       22:  191:                        ataques += std::to_string(i + 1); ataques += ",";
       22:  192:                        ataques += std::to_string(j + 1);
       22:  193:                        ataques += "            ";
       22:  194:                        ataques += std::to_string(y + 1); ataques += ",";
       22:  195:                        ataques += std::to_string(j-cont + 1); ataques += "\n";
       22:  196:                        valueReturn = 0;
       22:  197:                        break;
        -:  198:                    }
      329:  199:                    cont += 1;
        -:  200:                }
        -:  201:            }
        -:  202:        }
        -:  203:    }
       22:  204:    if (valueReturn == 0) {
       16:  205:        std::string nome = "ataques/ataques - ";
       16:  206:        nome += filename;
       16:  207:        std::string word = "tabuleiros/";
       16:  208:        size_t pos = nome.find(word);
       16:  209:        if (pos != std::string::npos) {
       15:  210:           nome.erase(pos, word.length());
        -:  211:        }
        -:  212:
       16:  213:        std::ofstream file(nome);
       16:  214:            if (file.is_open()) {
       16:  215:                file << ataques;
       16:  216:                file.close();
        -:  217:            } else {
    #####:  218:               std::cerr << "Erro ao criar o arquivo: " << nome << std::endl;
        -:  219:            }
       16:  220:    }
       22:  221:    return valueReturn;
       54:  222:}
        -:  223:
       32:  224:int verifica_solucao_8_rainhas(const std::string& filename) {
       32:  225:    int valor = check(filename);
        -:  226:
       32:  227:    if (valor == -1) {
       10:  228:        cout << "-1" << endl;
       10:  229:        return -1;  
        -:  230:    }
       22:  231:    if (valor == -2) {
    #####:  232:        cout << "Erro ao abrir arquivo" << endl;
        -:  233:    }
       22:  234:    if (valor == 0) {  
       16:  235:        cout << "0" << endl;
       16:  236:        return 0;
        -:  237:    }
        6:  238:    if (valor == 1) {  
        6:  239:        cout << "1" << endl;
        6:  240:        return 1;
        -:  241:    }
        -:  242:
    #####:  243:    return -1;
        -:  244:}
